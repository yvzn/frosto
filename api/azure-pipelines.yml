variables:
- group: "production"

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - api

pool:
  vmImage: ubuntu-latest

jobs:
- job: CI
  steps:
  - task: DotNetCoreCLI@2
    inputs:
      command: 'build'
      projects: 'api/*.csproj'
      arguments: '--configuration Release --arch x64 --os win --no-self-contained'
  - task: DotNetCoreCLI@2
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: 'api/*.csproj'
      nobuild: true
      arguments: '--configuration Release --arch x64 --os win --no-self-contained'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'api/bin/Release/net6.0/win-x64/publish.zip'
      publishLocation: 'pipeline'
      artifact: 'api'

- deployment: CD
  dependsOn: CI
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  environment: 'Azure'
  strategy:
    runOnce:
      deploy:
        steps:
        - task: ExtractFiles@1
          inputs:
            archiveFilePatterns: '$(Pipeline.Workspace)/api/*.zip'
            destinationFolder: '$(Pipeline.Workspace)/wip'
            cleanDestinationFolder: true
            overwriteExistingFiles: true
        - task: DownloadSecureFile@1
          name: dkimCertificate
          displayName: 'Download DKIM certificate'
          inputs:
            secureFile: 'dkim_private.pem'
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              echo Installing $(dkimCertificate.secureFilePath) to build directory
              rm $(Pipeline.Workspace)/wip/dkim_private.pem
              cp $(dkimCertificate.secureFilePath) $(Pipeline.Workspace)/wip/dkim_private.pem
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: '$(Pipeline.Workspace)/wip'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            replaceExistingArchive: true
        - task: AzureFunctionApp@1
          inputs:
            azureSubscription: '$(azureSubscription)'
            appType: 'functionApp'
            appName: '$(functionAppName)'
            package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            runtimeStack: 'DOTNET|6.0'
